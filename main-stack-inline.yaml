AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Include
Description: 'Main CloudFormation template with inline nested stacks for ECR and ECS'

Parameters:
  ECRRepositoryName:
    Type: String
    Default: 'ct-nginx-app'
    Description: 'Name of the ECR repository'
  
  ECSClusterName:
    Type: String
    Default: 'ct-ecs-cluster'
    Description: 'Name of the ECS cluster'
  
  VpcId:
    Type: String
    Description: 'VPC ID for the security group'
    Default: 'vpc-0df0f7a9a3a9d39ad'
  
  Subnet1:
    Type: String
    Description: 'First subnet ID for the ECS tasks'
    Default: 'subnet-07b8d4de7cbfd9d80'
  
  Subnet2:
    Type: String
    Description: 'Second subnet ID for the ECS tasks'
    Default: 'subnet-0aa4e302da3a8b2e3'

Resources:
  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
  
  # Log Group for ECS tasks
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ECSClusterName}'
      RetentionInDays: 7
  
  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ECSClusterName}-task'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${ECSClusterName}-container'
          Image: !Sub '${ECRRepository.RepositoryUri}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
  
  # Security Group for ECS tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ECSClusterName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2

Outputs:
  ECRRepositoryURI:
    Description: 'URI of the ECR repository'
    Value: !GetAtt ECRRepository.RepositoryUri
  
  ECSClusterName:
    Description: 'Name of the ECS cluster'
    Value: !Ref ECSCluster
  
  ECSServiceName:
    Description: 'Name of the ECS service'
    Value: !GetAtt ECSService.Name 